import { VK, Keyboard, IMessageContextSendOptions, ContextDefaultState, MessageContext, VKAppPayloadContext, KeyboardBuilder } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import { PrismaClient } from '@prisma/client'
import {
    QuestionManager,
    IQuestionMessageContext
} from 'vk-io-question';
import { randomInt } from 'crypto';
import { timeStamp } from 'console';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { send } from 'process';
import * as dotenv from 'dotenv' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
import { env } from 'process';
const Az = require('az');
const translate = require('secret-package-for-my-own-use');
dotenv.config()

export const token: string = String(process.env.token)
export const root: number = Number(process.env.root) //root user
export const chat_id: number = Number(process.env.chat_id) //chat for logs
export const group_id: number = Number(process.env.group_id)//clear chat group
export const timer_text = { answerTimeLimit: 300_000 } // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
export const answerTimeLimit = 300_000 // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export const vk = new VK({ token: token, /*pollingGroupId: group_id,*/ apiMode: "sequential", apiLimit: 1 });
//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();
export const prisma = new PrismaClient()

/*prisma.$use(async (params, next) => {
	console.log('This is middleware!')
	// Modify or interrogate params here
	console.log(params)
	return next(params)
})*/

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
vk.updates.use(questionManager.middleware);
vk.updates.on('message_new', hearManager.middleware);

//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
InitGameRoutes(hearManager)
registerUserRoutes(hearManager)
function deleteDuplicate(a: any){a=a.toString().replace(/ /g,",");a=a.replace(/[ ]/g,"").split(",");for(var b: any =[],c=0;c<a.length;c++)-1==b.indexOf(a[c])&&b.push(a[c]);b=b.join(", ");return b=b.replace(/,/g," ")};
//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context: any, next: any) => {
	if (context.isOutbox == false) {
		const data_old = Date.now()
        let count = 0
        let count_circle = 0
		const temp: Array<string> = Az.Tokens(context.text.toLowerCase()).done();
        //const temp: Array<string> = context.text.toLowerCase().replace(/[^–∞-—è–ê-–Ø ]/g, "").split(/(?:,| )+/)
		let ans: string = ''
		if (temp.length > 1) {
			for (let j = 0; j < temp.length-1; j++) {
				const find_one = await prisma.word_Couple.findMany({ where: { name_word_first: temp[j].toLowerCase() }})
				if (find_one.length >= 1) {
					ans += find_one.length > 1 ? `${find_one[randomInt(0, find_one.length)].name_word_first} ${find_one[randomInt(0, find_one.length)].name_word_second} ` : `${find_one[0].name_word_first} ${find_one[0].name_word_second} `
					count++
				}
				count_circle++
			}   
		} else {
			const find_one = await prisma.word_Couple.findMany({ where: { name_word_first: context.text.toLowerCase() }})
			if (find_one.length >= 1) {
				ans += find_one.length > 1 ? `${find_one[randomInt(0, find_one.length)].name_word_first} ${find_one[randomInt(0, find_one.length)].name_word_second} ` : `${find_one[0].name_word_first} ${find_one[0].name_word_second} `
				count++
			}
			count_circle++
		}
		try {
			const res = await translate(`${ans ? ans : "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é"}`, { from: 'auto', to: 'en', autoCorrect: true });
			if (res.text == "I don't understand") { console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${context.text}, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`); return }
			const fin = await translate(`${res.text ? res.text : "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é"}`, { from: 'en', to: 'ru', autoCorrect: true });
			console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${context.text} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: ${deleteDuplicate(fin.text)}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${count_circle} –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${(Date.now() - data_old)/1000} —Å–µ–∫.`)
			await context.send(`${deleteDuplicate(fin.text)}`)
		} catch {
			console.log(`–ê–≤–∞—Ä–∏—è, –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${context.text} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç: ${deleteDuplicate(ans)}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${count_circle} –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${(Date.now() - data_old)/1000} —Å–µ–∫.`)
			await context.send(`${deleteDuplicate(ans)}`)
		}
		
	}
	return next();
})
vk.updates.on('message_event', async (context: any, next: any) => { 
	//const data = await Book_Random_String('./src/book/tom1-7.txt')
	//context.answer({type: 'show_snackbar', text: `üîî ${data.slice(0,80)}`})
	return next();
})

vk.updates.start().then(() => console.log('LongPool server up!')).catch(console.log);