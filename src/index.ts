import { MessageContext, VK } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import { QuestionManager, IQuestionMessageContext } from 'vk-io-question';
import { registerUserRoutes } from './engine/player'
import { InitGameRoutes } from './engine/init';
import { Answer_Core_Edition, Call_Me_Controller, Re_Answer_controller, User_Ignore, User_Login, User_Registration, User_Say, User_ignore_Check, Word_Count_Controller } from './engine/helper';
//import { registerCommandRoutes } from './engine/command';
const natural = require('natural');
import * as dotenv from "dotenv";
dotenv.config();



export const root: number = Number(process.env.root) //root user

//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();

export const tokenizer = new natural.AggressiveTokenizerRu()
export const tokenizer_sentence = new natural.SentenceTokenizer()
/* —Ä–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª–∏—Ü–µ–∑—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
prisma.$use(async (params, next) => {
	const before = Date.now()
	const result = await next(params)
	const after = Date.now()
	console.log(`Query ${params.model}.${params.action} took ${after - before}ms`)
	return result
})
*/


export interface VKs_Info {
	idvk: number,
	type: string
}
// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ VK (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –≥—Ä—É–ø–ø–∞)
type VkEntityType = 'page' | 'group';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Vk-—Å—É—â–Ω–æ—Å—Ç–∏
type VkEntity = {
	token: string,
	idvk: number,
	type: VkEntityType
};

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö Vk-—Å—É—â–Ω–æ—Å—Ç—è—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
const vkEntities: VkEntity[] = JSON.parse(String(process.env.VK_ENTITIES)) || '[]';
// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç VK –¥–ª—è –∫–∞–∂–¥–æ–π Vk-—Å—É—â–Ω–æ—Å—Ç–∏
export const vks: VK[] = [];
export const vks_info: VKs_Info[] = [];
for (const entity of vkEntities) {
	//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	const vk = new VK({
		token: entity.token ,
		apiLimit: 1,
		pollingGroupId: entity.type === 'group' ? entity.idvk : undefined,
	});
	vks.push(vk);
	vks_info.push({ idvk: entity.idvk, type: entity.type })
}
for (const vk of vks) {
	//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
	vk.updates.use(questionManager.middleware);
	vk.updates.on('message_new', hearManager.middleware);
	vk.updates.use(questionManager.middleware);
	vk.updates.on('message_new', hearManager.middleware);
	//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
	InitGameRoutes(hearManager)
	registerUserRoutes(hearManager)
	//registerCommandRoutes(hearManager)
	//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	vk.updates.on('message_new', async (context: MessageContext, next) => {
		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${context.senderId} –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${context.text} –≤ ${context.isChat ? "–ë–µ—Å–µ–¥—É" : "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"}`)
		const regtrg = await User_Registration(context)
		if (context.hasAttachments("sticker")) { context.text = '—Å—Ç–∏–∫–µ—Ä —Å—Ç–∏–∫–µ—Ä —Å—Ç–∏–∫–µ—Ä —Å—Ç–∏–∫–µ—Ä' }
		if (context.isOutbox == false && await User_ignore_Check(context) && context.senderId > 0 && context.text) {
			//–º–æ–∂–µ—Ç  –æ–±–≤–µ—Ä–Ω–µ–º –≤ –µ–¥–∏–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
			if (regtrg) { await User_Ignore(context) }
			const bot_memory = await User_Login(context)
			if (!bot_memory) { return  await next() }
			if (context.isChat) {
				const call_me_check = await Call_Me_Controller(context.text)
				if (call_me_check) { return await next() }
				const re_answer_check = await Re_Answer_controller(context)
				if (re_answer_check) { return await next() }
				const word_controller = await Word_Count_Controller(context)
				if (word_controller) { return await next() }
			}
			if (await User_Say(context) == false) { return await next() }
			//–º–æ–¥—É–ª—å –≥–µ–Ω–∞
			let res: { text: string, answer: string, info: string, status: boolean } = await Answer_Core_Edition({ text: context.text, answer: '', info: '', status: false }, context)
			if (!res.status) { console.log(res.info); return await next() }
			try { 
				if (context.isChat) { await context.reply(`${res.answer}`) } else { await context.send(`${res.answer}`) }
				console.log(res.info)
			} catch (e) {
				console.log(`–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: ${e}`) 
			}
		}
		return await next();
	})
	vk.updates.on('wall_reply_new', async (context: any, next: any) => {
		context.senderId = context.fromId
		console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${context.senderId} –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ${context.text} –Ω–∞ —Å—Ç–µ–Ω—É –≥—Ä—É–ø–ø—ã`)
		const regtrg = await User_Registration(context)
		if (context.hasAttachments("sticker")) { context.text = '—Å—Ç–∏–∫–µ—Ä' }
		if (context.fromId > 0 && context.text) {
			const call_me_check = await Call_Me_Controller(context.text)
			if (call_me_check) { return await next() }
			const word_controller = await Word_Count_Controller(context)
			if (word_controller) { return await next() }
			if (await User_Say(context) == false) { return await next() }
			//–º–æ–¥—É–ª—å –≥–µ–Ω–∞
			let res: { text: string, answer: string, info: string, status: boolean } = await Answer_Core_Edition({ text: context.text, answer: '', info: '', status: false }, context)
			if (!res.status) { console.log(res.info); return await next() }
			try {
				if (context.isWallComment) {
					await context.api.wall.createComment({owner_id: context.ownerId, post_id: context.objectId, reply_to_comment: context.id, guid: context.text, message: `${res.answer}`})
					console.log(res.info)
				}
			} catch (e) {
				console.log(`–ü—Ä–æ–±–ª–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: ${e}`)
			}
		}
		return await next();
	})
	/*vk.updates.on('friend_request', async (context: any, next) => {
		console.log("üöÄ ~ file: index.ts:132 ~ vk.updates.on ~ context:", context)
		const { user_id } = context.payload;
		try {
		  await context.api.friends.add({ user_id });
		  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥—Ä—É–∑—å—è`);
		} catch (error) {
		  console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id ${user_id} –≤ –¥—Ä—É–∑—å—è`, error);
		}
	  
		return next();
	  });*/
	vk.updates.start().then(() => {
		console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏!')
	}).catch(console.log);
}