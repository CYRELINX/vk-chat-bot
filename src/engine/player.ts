import { PrismaClient } from "@prisma/client";
import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { send } from "process";
import { Attachment, Context, Keyboard, KeyboardBuilder, PhotoAttachment } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import * as xlsx from 'xlsx';

import { answerTimeLimit, chat_id, prisma, root, timer_text, tokenizer, tokenizer_sentence, vk } from '../index';
import { readDir, MultipleReader, MultipleReaderDictionary, MultipleReaderQuestion, MultipleReaderQuestionMod } from "./parser";



export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/!–ø–∞—Ä–∞/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const dir = `./src/book`
            const file_name: any = await readDir(dir)
            for (const file of file_name) {
                await MultipleReader(dir, file, context)
            }
        }
    })
    hearManager.hear(/!—Å–ª–æ–≤–∞—Ä—å/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const dir = `./src/book`
            const file_name: any = await readDir(dir)
            for (const file of file_name) {
                await MultipleReaderDictionary(dir, file, context)
            }
        }
    })
    hearManager.hear(/!–±–∞–∑–∞/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const dir = `./src/book`
            const file_name: any = await readDir(dir)
            for (const file of file_name) {
                await MultipleReaderQuestion(dir, file, context)
            }
        }
    })
    hearManager.hear(/!–±–∞–∑–æ–º–æ–¥/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const dir = `./src/book`
            const file_name: any = await readDir(dir)
            for (const file of file_name) {
                await MultipleReaderQuestionMod(dir, file, context)
            }
        }
    })
    hearManager.hear(/!–∫–æ–Ω—Ñ–∏–≥/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            await context.send(`–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: \n üë§ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –†–∞–∑—Ä–µ—à–µ–Ω—ã \n üë• –ë–µ—Å–µ–¥—ã: –†–∞–∑—Ä–µ—à–µ–Ω—ã \n ‚öô –ó–∞—â–∏—Ç—ã –æ—Ç—Å—É—Å—Ç–≤—É—é—Ç`)
        }
    })
    hearManager.hear(/!–ø–æ–º–æ—â—å/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            await context.send(`‚ò† –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ:
                \n‚öô !—Å–ª–æ–≤–∞—Ä—å - –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –±–æ—Ç–∞ –Ω–∞ –≤—Å–µ –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ —ç—Ç–æ–≥–æ, –Ω—É–∂–µ–Ω –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π*
                \n‚öô !–ø–∞—Ä–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–Ω—ã–µ —Å–≤—è–∑–∏ —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∏ —á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥*
                \n‚öô !–±–∞–∑–∞ - —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ö—Ç —Ñ–æ—Ä–º–∞—Ç–∞: –í–æ–ø—Ä–æ—Å\\–û—Ç–≤–µ—Ç –∏ –≤—Å–µ —á—Ç–æ –¥–æ –≤—Ç–æ—Ä–æ–π , –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–º –Ω–∞—Ñ–∏–≥ –Ω–µ –Ω–∞–¥–æ. –∑–∞–∫–∏–¥—ã–≤–∞—è –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                \n‚öô !–±–∞–∑–æ–º–æ–¥ - —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ö—Ç —Ñ–æ—Ä–º–∞—Ç–∞: –í–æ–ø—Ä–æ—Å \\n –û—Ç–≤–µ—Ç \\r\\n ... –í–æ–ø—Ä–æ—Å \\n –û—Ç–≤–µ—Ç \\r\\n –∑–∞–∫–∏–¥—ã–≤–∞—è –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                \n‚öô !–∫–æ–Ω—Ñ–∏–≥ - —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ö—Ç —Ñ–æ—Ä–º–∞—Ç–∞: –í–æ–ø—Ä–æ—Å\\–û—Ç–≤–µ—Ç –∏ –≤—Å–µ —á—Ç–æ –¥–æ –≤—Ç–æ—Ä–æ–π , –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–º –Ω–∞—Ñ–∏–≥ –Ω–µ –Ω–∞–¥–æ. –∑–∞–∫–∏–¥—ã–≤–∞—è –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                \n‚öô !–º—É—Ç–∏–Ω–≥ idvk - –≥–¥–µ idvk, –ø–∏—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫, –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                \nüí° –ü–æ –ø—É—Ç–∏ ./src/book/ –∫–ª–∞–¥–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–ø–∞–ø–∫—É) –∫–Ω–∏–≥—É/answer_database –≤ txt —Ñ–æ—Ä–º–∞—Ç–∞, –∏ –≤–Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–ª–æ–≤–∞—Ä—å, –ø–æ –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—é –æ–±—É—á–µ–Ω–∏–µ.
                \nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: 1 –ú–ë txt —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è 4+ —á–∞—Å–∞, —Ç.–µ. –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∏ 1 –ú–ë —Ç—Ö—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 4 —á–∞—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞, –∏ –µ—â–µ 4 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–Ω–∏–≥–µ. –ê –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 6-7 —Å—Ç—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É.`
            )
        }
    })
    hearManager.hear(/!–º—É—Ç–∏–Ω–≥/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context?.text != undefined) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: any = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { idvk: target }, data: { ignore: user.ignore ? false : true } })
                    await context.send(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`)
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
}


    