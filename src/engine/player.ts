import { User } from "@prisma/client";
import { HearManager } from "@vk-io/hear";
import { IQuestionMessageContext } from "vk-io-question";
import { root, starting_date, tokenizer, tokenizer_sentence } from '../index';
import { readDir, MultipleReaderQuestion, MultipleReaderQuestionMod, exportData, clearData, parseAndSaveData } from "./parser";
import { User_ignore_Check, User_Info, User_Registration, Sleep } from './helper';
import prisma from "../module/prisma";
import { randomInt } from "crypto";


export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
    hearManager.hear(/!–±–∞–∑–∞/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const dir = `./src/book`
            const file_name: any = await readDir(dir)
            for (const file of file_name) {
                await parseAndSaveData(`${dir}/${file}`, context)
            }
        }
    })
    hearManager.hear(/!–∫–æ–Ω—Ñ–∏–≥/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const count_answer = await prisma.answer.count({})
            await context.send(`–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: \n üî∏ –í–µ—Ä—Å–∏—è: 0.0.75 Pre-Alpha Building \n üë§ –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –†–∞–∑—Ä–µ—à–µ–Ω—ã \n üë• –ë–µ—Å–µ–¥—ã: –†–∞–∑—Ä–µ—à–µ–Ω—ã \n ‚öô –ó–∞—â–∏—Ç—ã: ‚úÖ–ê–Ω—Ç–∏—Å–ø–∞–º ‚úÖ"–Ø –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Å—å" \n üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏: ${count_answer} \n\n üìù –ü–æ–∏—Å–∫–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏: \n üîç DirectBoost - –∏—â–µ—Ç –æ—Ç–≤–µ—Ç—ã 1 –∫ 1; \n üîç MultiBoost - –∏—â–µ—Ç –¥–ª—è –∫—É—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—á–µ—Ç–∫–æ; \n üîç SpeedBoost - –∏—â–µ—Ç –Ω–µ—á–µ—Ç–∫–æ —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ.`)
        }
    })
    hearManager.hear(/!–ø–æ–º–æ—â—å/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            await context.send(`‚ò† –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ: \n
                \n‚öô !–±–∞–∑–∞ - —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ö—Ç —Ñ–æ—Ä–º–∞—Ç–∞: –í–æ–ø—Ä–æ—Å\\–û—Ç–≤–µ—Ç –∏ –≤—Å–µ —á—Ç–æ –¥–æ –≤—Ç–æ—Ä–æ–π , –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–º –Ω–∞—Ñ–∏–≥ –Ω–µ –Ω–∞–¥–æ. –∑–∞–∫–∏–¥—ã–≤–∞—è –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                \n‚öô !–∫–æ–Ω—Ñ–∏–≥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
                \n‚öô !–∏–≥–Ω–æ—Ä idvk - –≥–¥–µ idvk, –ø–∏—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫, –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                \n‚öô !–∏–Ω—Ñ–∞ - –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –∏ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞, –∫–æ–Ω–µ—á–Ω–æ –≤–∞–º –ø–æ–∫–∞–∂—É—Ç –Ω–µ –≤—Å–µ=)
                \n‚öô !—é–∑–µ—Ä–¥—Ä–æ–ø - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                \nüí° –ü–æ –ø—É—Ç–∏ ./src/book/ –∫–ª–∞–¥–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–ø–∞–ø–∫—É) –∫–Ω–∏–≥—É/answer_database –≤ txt —Ñ–æ—Ä–º–∞—Ç–∞, –∏ –≤–Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–ª–æ–≤–∞—Ä—å, –ø–æ –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—é –æ–±—É—á–µ–Ω–∏–µ.
                \nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: 1 –ú–ë txt —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è 4+ —á–∞—Å–∞, —Ç.–µ. –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∏ 1 –ú–ë —Ç—Ö—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 4 —á–∞—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞, –∏ –µ—â–µ 4 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–Ω–∏–≥–µ. –ê –ø—Ä–∏ —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 6-7 —Å—Ç—Ä–æ–∫ –≤ —Å–µ–∫—É–Ω–¥—É.`
            )
        }
    })
    hearManager.hear(/!–∏–≥–Ω–æ—Ä/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: any = await prisma.user.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.user.update({ where: { idvk: target }, data: { ignore: user.ignore ? false : true } })
                    await context.send(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`)
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.ignore ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∏–≥–Ω–æ—Ä–∞'}`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                    console.log(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                }
            }
        }
    })
    hearManager.hear(/!—é–∑–µ—Ä–¥—Ä–æ–ø/, async (context) => {
        if (context.isOutbox == false && context.senderId == root) {
            const user: User[] | null = await prisma.user.findMany({})
            if (user && user.length >= 1) {
                for (const i in user) {
                    const login = await prisma.user.delete({ where: { id: user[i].id } })
                    console.log(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –±—ã–ª —É–¥–∞–ª–µ–Ω`)
                }
                await context.send(`‚öô –í–Ω–∏–º–∞–Ω–∏–µ, –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ ${user.length}'}`)
            } else {
                await context.send(`‚öô –û–±–∏–¥–Ω–æ, –Ω–æ –Ω–µ–∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å... –£–≤—ã`)
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`)
            }
        }
    })
    hearManager.hear(/!–∏–Ω—Ñ–∞/, async (context) => {
        await User_Registration(context)
        if (await User_ignore_Check(context)) { return; }
        if (context.isOutbox == false) {
            const user: User | null = await prisma.user.findFirst({ where: { idvk: context.senderId } })
            const info: any = await User_Info(context)
            if (user) {
                await context.send(` üë§ –ò–º—è: @id${user.idvk}(${info.first_name}): \n\n üí≥ –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${user.id} \n üé• –ö—Ä–µ–º–ª–µ–≤—Å–∫–∏–π –Ω–æ–º–µ—Ä: ${user.idvk} \n ‚ö† –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${user.warning}/3 \n ‚ö∞ –î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: ${user.crdate} \n ‚õì –°—Ç–∞—Ç—É—Å: ${user.ignore ? '–í —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ' : '–ó–∞–∫–æ–Ω–æ–ø–æ—Å–ª—É—à–Ω—ã'}`)
            }
        }
    })
    hearManager.hear(/!–ø—Ä–æ–≤–µ—Ä–∫–∞/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context?.text != undefined) {
            const sentence: Array<string> = tokenizer_sentence.tokenize(context.text.toLowerCase())
            const pusher = []
            for (const stce in sentence) {
                //–±–µ—Ä–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                const sentence_sel: string = sentence[stce]
                const word_list = tokenizer.tokenize(sentence_sel)
                for (let j = 0; j < word_list.length; j++) {
                    pusher.push( { qestion: { contains: word_list[j] } } )
                }
            }
            console.log("üöÄ ~ file: player.ts:128 ~ hearManager.hear ~ pusher:", pusher)
            const counter = await prisma.answer.findMany({
                where: {
                    OR: pusher
                },
                take: 10,
                orderBy: 
                    [{answer: 'desc'},
                    {qestion: 'asc'}]
            })
            await context.send(`–ù–∞–π–¥–µ–Ω–æ –Ω–∞ ${context.text} –∑–∞–ø–∏—Å–µ–π: ${counter.length}... ${JSON.stringify(counter).slice(0, 150)}`)
            console.log(`–ù–∞–π–¥–µ–Ω–æ –Ω–∞ ${context.text} --> ${JSON.stringify(counter)}`)
            await Sleep(randomInt(5000, 10000))
            //await Answer_Duplicate_Clear(context)
        }
    })
    hearManager.hear(/!migrate/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context?.text != undefined) {
            await context.send(`–í–Ω–∏–º–∞–Ω–∏–µ, –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ +100500 –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É—Ç –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã, –±–µ–∫–∞–ø–∏—Ç—å—Å—è —É–∂–µ –ø–æ–∑–¥–Ω—è–∫!`)
            console.log(`–í–Ω–∏–º–∞–Ω–∏–µ, –∑–∞–ø—É—â–µ–Ω–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ +100500 –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É—Ç –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã, –±–µ–∫–∞–ø–∏—Ç—å—Å—è —É–∂–µ –ø–æ–∑–¥–Ω—è–∫!`)
            const count_answer = await prisma.answer.count({})
            await context.send(`–ú—ã –Ω–∞—Å—á–∏—Ç–∞–ª–∏ ${count_answer} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–∞—Ä –∏–∑ –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤.`)
            console.log(`–ú—ã –Ω–∞—Å—á–∏—Ç–∞–ª–∏ ${count_answer} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–∞—Ä –∏–∑ –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤.`)
            await updateModel(context)
            await context.send(`–ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞—á–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏–π!`)
            console.log(`–ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞—á–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏–π!`)
        }
    })
    hearManager.hear(/!dumping/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context?.text != undefined) {
            await context.send(`–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–ª–∏–≤–∞ –±–¥ –≤ —Ç—Ö—Ç, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º`)
            console.log(`–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–ª–∏–≤–∞ –±–¥ –≤ —Ç—Ö—Ç, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º`)
            await exportData()
            await context.send(`–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–ª–∏–≤–∞ –±–¥ –≤ —Ç—Ö—Ç, –ª–∞–¥–Ω–æ`)
            console.log(`–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å–ª–∏–≤–∞ –±–¥ –≤ —Ç—Ö—Ç, –ª–∞–¥–Ω–æ`)
        }
    })
    hearManager.hear(/!clever/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context?.text != undefined) {
            await context.send(`–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–∏—Å—Ç–∫–∏ –±–¥ –≤ —Ç—Ö—Ç, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º`)
            console.log(`–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–∏—Å—Ç–∫–∏ –±–¥ –≤ —Ç—Ö—Ç, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º`)
            await clearData(`data.txt`)
            await context.send(`–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–∏—Å—Ç–∫–∏ –±–¥ –≤ —Ç—Ö—Ç, –ª–∞–¥–Ω–æ`)
            console.log(`–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–∏—Å—Ç–∫–∏ –±–¥ –≤ —Ç—Ö—Ç, –ª–∞–¥–Ω–æ`)
        }
    })
    hearManager.hear(/!–∞–ø—Ç–∞–π–º/, async (context) => {
        if (context.isOutbox == false && context.senderId == root && context?.text != undefined) {
            const now = new Date();
            const diff = now.getTime() - starting_date.getTime();
            const timeUnits = [
                { unit: "–¥–Ω–µ–π", value: Math.floor(diff / 1000 / 60 / 60 / 24) },
                { unit: "—á–∞—Å–æ–≤", value: Math.floor((diff / 1000 / 60 / 60) % 24) },
                { unit: "–º–∏–Ω—É—Ç", value: Math.floor((diff / 1000 / 60) % 60) },
                { unit: "—Å–µ–∫—É–Ω–¥", value: Math.floor((diff / 1000) % 60) },
            ];
            await context.send(`–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeUnits.filter(({ value }) => value > 0).map(({ unit, value }) => `${value} ${unit}`).join(" ")}`);
        }
    })
}
/*async function updateModel(context: any) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É Question –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Answer
    const distinctQuestions = await prisma.answer.findMany({ distinct: ['qestion'], select: { qestion: true } });
    await context.send(`–ò–∑ –Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ${distinctQuestions.length} –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–∞—Ä –∏–∑ –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤.`)
    console.log(`–ò–∑ –Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ${distinctQuestions.length} –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–∞—Ä –∏–∑ –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤.`)
    for (const { qestion } of distinctQuestions) { await prisma.question.create({ data: { text: qestion } }) }
    const count_question = await prisma.question.count({})
    await context.send(`–ë—ã–ª–æ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ ${count_question} –≤–æ–ø—Ä–æ—Å–æ–≤.`)
    console.log(`–ë—ã–ª–æ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ ${count_question} –≤–æ–ø—Ä–æ—Å–æ–≤.`)
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É Answer
    const answers = await prisma.answer.findMany();
    let counter = 0
    for (const answer of answers) {
        const question: any = await prisma.question.findUnique({ where: { text: answer.qestion } });
        await prisma.answer.update({ where: { id: answer.id }, data: { id_question: question.id } });
        counter++
    }
    await context.send(`–°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫—É —Ä–µ–æ–≥—Ä–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${counter} –æ—Ç–≤–µ—Ç–æ–≤.`)
    console.log(`–°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫—É —Ä–µ–æ–≥—Ä–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${counter} –æ—Ç–≤–µ—Ç–æ–≤.`)
}  */
async function updateModel(context: any) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ Question
    const existingQuestions = await prisma.question.findMany();
    const existingQuestionTexts = new Set(existingQuestions.map((question) => question.text));
    const distinctQuestions = await prisma.answer.findMany({ distinct: ['qestion'], select: { qestion: true } });
    const newQuestions = distinctQuestions.filter((question) => !existingQuestionTexts.has(question.qestion));
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ Question
    let createdQuestions = [];
    if (newQuestions.length > 0) {
        for (const question of newQuestions) {
            const createdQuestion = await prisma.question.create({ data: { text: question.qestion } });
            console.log(`–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: ${createdQuestion.id} --> ${createdQuestion.text}`)
            createdQuestions.push(createdQuestion);
        }
    }
    await context.send(`–ò–∑ –Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ${distinctQuestions.length} –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–∞—Ä –∏–∑ –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤.`);
    console.log(`–ò–∑ –Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ ${distinctQuestions.length} –¥–ª—è –∑–∞–ø–∏—Å–µ–π –ø–∞—Ä –∏–∑ –í–æ–ø—Ä–æ—Å–æ–≤ –∏ –û—Ç–≤–µ—Ç–æ–≤.`);
    const countCreatedQuestions = createdQuestions.length;
    await context.send(`–ë—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ ${countCreatedQuestions} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.`);
    console.log(`–ë—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ ${countCreatedQuestions} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.`);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É Answer
    let updatedAnswersCount = 0;
    for (const answer of await prisma.answer.findMany({ where: { id_question: null } })) {
        const question: any = existingQuestions.find((q) => q.text === answer.qestion) || createdQuestions.find((q) => q.text === answer.qestion);
        if (question) {
            console.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å –¥–ª—è: ${question.text} --> ${question.id} <-- ${answer.id}`)
            await prisma.answer.update({ where: { id: answer.id }, data: { id_question: question.id } });
            updatedAnswersCount++;
        }
    }
    await context.send(`–°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫—É —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${updatedAnswersCount} –æ—Ç–≤–µ—Ç–æ–≤.`);
    console.log(`–°–æ–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫—É —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${updatedAnswersCount} –æ—Ç–≤–µ—Ç–æ–≤.`);
}
