import { prisma, vk } from "..";

export async function User_Registration(context: any) {
    const user: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
    if (!user) {
        const registration = await prisma.user.create({ data: { idvk: context.senderId}})
        console.log(`–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${registration.idvk}`)
    }
}
export async function User_Login(context: any) {
    const user: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
    const time = new Date()
    if (user.last != context.text && user?.lastlast != context.text) {
        if (user.memorytrg != false) { await prisma.user.update({ where: { idvk: context.senderId }, data: { memorytrg: false } }) }
        if (user.count < 1) {
            const update = await prisma.user.update({ where: { idvk: context.senderId }, data: { last: context.text, lastlast: user.last, count: { increment: 1 } } })
        } else {
            const reset = await prisma.user.update({ where: { idvk: context.senderId }, data: { last: context.text, lastlast: user.last, count: 0, update: time } })
        }
        return true
    } else {
        if (user.memorytrg == false) {
            await context.send(`üõ° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: \n ${user.last.length != '' ? `–í—ã –º–Ω–µ —É–∂–µ –ø–∏—Å–∞–ª–∏ —Ä–∞–Ω–µ–µ: ${user.last}` : '' } \n ${user.lastlast.length != '' ? `–ö–∞–∫-—Ç–æ –Ω–µ–≤–∑–Ω–∞—á–∞–π –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏: ${user.lastlast}` : '' }.`)
            await prisma.user.update({ where: { idvk: context.senderId }, data: { memorytrg: true } })
        }
        
        if (user.count < 1) {
            const update = await prisma.user.update({ where: { idvk: context.senderId }, data: { count: { increment: 1 } } })
        } else {
            const reset = await prisma.user.update({ where: { idvk: context.senderId }, data: { count: 0, update: time } })
        }
        return false
    }
}
export async function User_Ignore(context: any) {
    const info: any = await User_Info(context)
    const time: any = new Date()
    const user: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
    if (time - user.update < 3000) {
        if (user.warning < 2) {
            const login = await prisma.user.update({ where: { idvk: context.senderId }, data: { warning: { increment: 1 } } })
            await context.send(user.warning == 0 ? `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: \n –£–≤–∞–∂–∞–µ–º—ã–π @id${context.senderId}(${info.first_name}), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–æ.` : `‚õî –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: \n –£–≤–∞–∂–∞–µ–º—ã–π @id${context.senderId}(${info.first_name}), –Ω–µ —Å–ø–∞–º—å—Ç–µ, –∞ —Ç–æ –±—É–¥–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º.`)
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞: ${login.idvk}`)
        } else {
            const login = await prisma.user.update({ where: { idvk: context.senderId }, data: { ignore: user.ignore ? false : true, warning: 0 } })
            await context.send(`üõ° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã: \n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id${context.senderId}(${info.first_name}), –≤–∞—à idvk ${context.senderId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞.`)
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∏–≥–Ω–æ—Ä–∞: ${login.idvk}`)
        }
    }
}
export async function User_Info(context: any) {
    let [userData]= await vk.api.users.get({user_id: context.senderId});
    return userData
}
export async function User_ignore_Check(context: any) {
    const user: any = await prisma.user.findFirst({ where: { idvk: context.senderId } })
    return user.ignore ? false : true
}